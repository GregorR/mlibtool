mlibtool is the libtool accelerator. It does not replace the entire broad
functionality of GNU libtool, but implements the sane uses of libtool on sane
systems. On insane systems, mlibtool simply calls libtool, maintaining
backwards compatibility.

At present, mlibtool defines "sane" as Linux (regardless of libc), *BSD or
GNU/Hurd. These systems all follow the same rules regarding library building
commands and naming. Mac OS X may be supported in the future. Windows will
never be supported (except by calling GNU libtool).

There are three main use cases of mlibtool:

(1) Speeding up libtool-utilizing builds:

    For this option, you probably want to install mlibtool to $PATH, though
    doing so is not strictly necessary.

    If you also have GNU libtool installed to $PATH, simply run the build as
     $ make LIBTOOL="mlibtool libtool"

    Otherwise, something like
     $ make LIBTOOL="mlibtool $PWD/libtool"
    but this command depends on where the build puts its local copy of libtool.


(2) As a first-choice library building tool:

    If you want to build libraries and want to be portable, unfortunately it is
    often necessary to use GNU libtool. It's easy enough to build libraries for
    only one platform, but supporting all platforms is painful; this is why GNU
    libtool exists!

    However, GNU libtool is notoriously slow and bloated. To be fair, it /has/
    to be.

    mlibtool provides a reasonable alternative. Instead of using libtool,
    simply include mlibtool.c and nomlibtool.sh, and enhance your Makefile
    something like this:

    mlibtool:
            cc mlibtool.c -o mlibtool || ( cp nomlibtool.sh mlibtool ; chmod 0755 mlibtool )

    And run mlibtool as `mlibtool $(CROSS)libtool`, where $(CROSS) is an empty
    string for native builds and a cross-compiler prefix for cross-builds. Note
    that `cc` is not a typo, as mlibtool must always be built for the host, and
    that mlibtool itself is always cross-build capable for supported hosts and
    targets (which it checks).

    This particular use will require that end-users on insane systems have an
    installed copy of GNU libtool. It is also possible to include a copy of GNU
    libtool, but that's easiest if you use GNU autoconf.


(3) As an adjunct to libtool in autoconf-using packages:

    This is definitely the trickiest, but it's doable. As a basis, include
    mlibtool.c, and after LT_INIT in configure.ac, add something like this:

    if cc $srcdir/mlibtool.c -o mlibtool; then
        LIBTOOL="$ac_pwd/mlibtool $LIBTOOL"
    fi


================================================================
= BUGS AND INCOMPATIBILITIES                                   =
================================================================

mlibtool strives to be compatible with all useful features of GNU libtool, but
isn't there yet.

An intentional difference between GNU libtool and mlibtool is the installation
of .la library wrappers. GNU libtool typically installs them, but they're
rarely useful; pkg-config has subsumed their role. As such, mlibtool only
installs the actual .so and .a files, never the .la wrapper. Note that this
also means that a package built by mlibtool must be installed by mlibtool, not
by GNU libtool; mlibtool will not generate the wrappers that GNU libtool tries
to install.

mlibtool cannot build .la files from .lo wrappers created by GNU libtool. This
is because it uses a simple naming scheme for .o files, and so doesn't read
them from the generated wrapper. GNU libtool can build .la files from .lo
wrappers created by mlibtool.
